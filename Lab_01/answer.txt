# 1. Write, compile and run the ChoosingOption program

import javax.swing.JOptionPane;
public class ChoosingOption {

	public static void main(String[] args) {
		int option = JOptionPane.showConfirmDialog(null, 
								"Do you want to change to the first class ticket?");
		JOptionPane.showMessageDialog(null, "You've chosen: "
										+ (option==JOptionPane.YES_OPTION?"YES":"NO"));
		System.exit(0);

	}

}

# 2. Write a program for input/output from keyboard

import java.util.Scanner;
public class InputFromKeyboard {

	public static void main(String[] args) {
		Scanner keyboard = new Scanner(System.in);
		System.out.println("What's your name?");
		String strName = keyboard.nextLine();
		System.out.println("How old are you?");
		int iAge = keyboard.nextInt();
		System.out.println("How tall are you (m)?");
		double dHeight = keyboard.nextDouble();
		System.out.println("Mrs/Ms " + strName +", " + iAge + " years old. " 
						+ "Your height is " + dHeight + ".");
		keyboard.close();
	}

}

# 2.1. Write a program to display a triangle with a height of n stars (*), n is entered by users.

import java.util.Scanner;
import java.text.Format;
public class TriangleWithHeight {

	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner keyboard = new Scanner(System.in);
		System.out.println("Which height???");
		int number = keyboard.nextInt();
		
		int i;
		
		for (i = 0; i < number; i++) {
			System.out.println(" ".repeat(number-i) + "*".repeat(i*2+1));
		}
		keyboard.close();
	}
}

# 3. Write a program to display the number of days of a month, which is entered by users (both month and year). If it is an invalid month/year, ask the user to enter again.

import java.util.Scanner;
import java.util.*;
import java.util.Arrays;

public class DaysOfMonthYear {

	//check valid method: year non-negative, month in rule to write
	static boolean checkValidMonth(String[] month, String mMonth) {
		for (int i = 0; i < month.length; i++) {
			if (month[i].equals(mMonth)) {
				return true;
			}
		}
		return false;
	}
	
	static boolean checkValidYear(int yYear) {
		boolean check = false;
		if (yYear >0) {
			check = true;
		}
		return check;
	}
	
	static boolean checkValidInp(String[] month, String mMonth, int yYear) {
		boolean check;
		if (checkValidYear(yYear) && checkValidMonth(month, mMonth)) {
			check =true;
		}
		else {
			check = false;
		}
		return check;
	}
	
	//check leap year
	static boolean checkLeapYear(int mMonth, int yYear) {
		boolean check = false;	
		if ((yYear % 4 == 0 && yYear %100 != 0) || yYear%400 == 0) {
			check = true;
		}
		return check;
	}
	
	//change month to integer month	
    static int changeIntMonth(String[] month, String mMonth)
    {
        for (int i=0; i<month.length; i++){
            if (month[i].equals(mMonth)){
                return i%12+1;
            }
        }
        return 0;
    }

	//dayOfMonth
	static int dayOfMonth(int mMonth, int yYear) {
		int day = 0;
		
		//Months have 30 days
		int [] m30Days = {4, 6, 9, 11};
		
		//Days of a Month
		for (int i = 0; i < m30Days.length; i++) {
			if (m30Days[i] == mMonth) {
				day = 30;
				break;
			}
			else if (mMonth == 2) {
				if (checkLeapYear(mMonth, yYear)) {
					day = 29;
				}
				else {
					day = 28;
				}
				break;
			}
			else {
				day = 31;
			}
		}
		return day;
	}
	
	//Main method
	public static void main(String[] args) {
			
		//declare month & year
		int yYear;
		String mMonth;
		Scanner keyboard = new Scanner(System.in);
		
		//List of month
		String [] month = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", 
			"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec",
			"Jan.", "Feb.", "Mar.", "Apr.", "May.", "Jun.", "Jul.", "Aug.", "Sep.", "Oct.", "Nov.", "Dec.",
			"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};
		
		//back if not valid input
        while (true) {
			System.out.println("Which year?");
			yYear = keyboard.nextInt();
			System.out.println("Which month?");
			mMonth = keyboard.next();
	            if (checkValidInp(month,mMonth, yYear)) {
	                break;
            }
	        System.out.println("Please, try again with a valid input!");
        }
        
		int monthInt = changeIntMonth(month, mMonth);				
		int dayOfMonth_Year= dayOfMonth(monthInt, yYear);
		System.out.println("The number of days in " + month[monthInt+35] + ", " + yYear + " is " + dayOfMonth_Year + " days.");	
		keyboard.close();
	}
}

# 4. Write a Java program to sort a numeric array, and calculate the sum and average value of array elements.

public class SortingArray {

	//Sorting
	public void heapSort(int arr[]) {
		
		int LENGTH = arr.length;
		
		//build heap
		for (int node = LENGTH/2 - 1; node>=0; node--) {
			heapifyArray(arr, LENGTH, node);
		}
		
		//Do this until heap have only 1 element
		for (int node = arr.length -1; node >1; node--) {
			//move current node
			int temp = arr[0];
			arr[0] = arr[node];
			arr[node] = temp;
			
			heapifyArray(arr, node, 0);
		}
		int swap = arr[0];
		arr[0] = arr[1];
		arr[1] = swap;
	}
	
	//build Heap
	
	//heapify
	void heapifyArray(int arr[], int LENGTH, int node) {
		int largest = node;
		int left = 2 * node +1;
		int right = 2 * node +2;
		 
        // when left child is larger than root
        if (left < LENGTH && arr[left] > arr[largest]) {
            largest = left;
        }
 
        // when right child is larger than largest
        if (right < LENGTH && arr[right] > arr[largest]) {
            largest = right;
        }
 
        // When largest isn't root
        if (largest != node) {
            int swap = arr[node];
            arr[node] = arr[largest];
            arr[largest] = swap;
            //Recursive heapify to max heap
            heapifyArray(arr, LENGTH, largest);
        }
	}
	
	//Print the result
    public static void printArray(int arr[]){
        int LENGTH = arr.length;
        for (int i = 0; i < LENGTH; ++i) {
            System.out.print(arr[i] + " ");
        }
    }
	
}

public class AverageArray {
	public int averageArray(int arr[]) {
		int sum = 0, LENGTH;
		LENGTH = arr.length;
		for (int i = 0; i< LENGTH; i++) {
			sum += arr[i];
		}
		return sum/LENGTH;
	}
}

import java.util.Scanner;

public class ArrayWithSpecialMethods {
	
	//Main
	public static void main(String[] args) {
		
		//Scan the data from keyboard
		Scanner keyboard = new Scanner(System.in);
		
		//LENGTH he/she want of array
		System.out.println("The number of integer you want in array:");
		int LENGTH = keyboard.nextInt();
		int [] arr = new int[LENGTH];
		
		//Input elements of array
		System.out.println("Please, enter the elements of array!");
		for (int i = 0; i < LENGTH; i++) {
			arr[i] = keyboard.nextInt();
		}
	    

		//Choosing option
		System.out.println("Choose option which you want to do with the array? \n"
				+ "1. Sort the array \n"
				+ "2. Calculate the average of this array \n"
				+ "3. Calculate the sum of this array.");
		int choose = keyboard.nextInt();
		if (choose == 1) {
			SortingArray sort = new SortingArray();
			sort.heapSort(arr);
			System.out.println("The array after sorting is: ");
			sort.printArray(arr);
		}
		else if (choose == 2) {
			AverageArray arr2 = new AverageArray();
			int res = arr2.averageArray(arr);
			System.out.println("Average of this array is: " + res);
		}
		else if (choose ==3) {
			int sum = 0;
			for (int i =0; i < LENGTH; i++) {
				sum +=arr[i];
			}
			System.out.println("The sum is: " + sum);
		}
		else {
			System.out.println("Your chosen is wrong, good bye!");
		}
		
		keyboard.close();
	}

}


# 5. Write a Java program to add two matrices of the same size.

import java.util.Scanner;

public class SumOf2Matrices {
	
	//Input matrix method
	public static int[][] inputMatrices(int width, int height) {
		int matrix[][] = new int[width][height];
		Scanner keyboard = new Scanner(System.in);
		for (int j = 0; j < height; j++) {
			for (int i = 0; i < width; i++) {
				matrix[i][j] = keyboard.nextInt();
			}
		}
		return matrix;
	}
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		//scan width
		System.out.println("Enter the width of matrices");
		int width = sc.nextInt();
		
		//scan height
		System.out.println("Enter the height of matrices");
		int height = sc.nextInt();
		
		//scan matrix A
		System.out.println("Enter the matrix A following its row");
		int matrixA[][] = inputMatrices(width, height);
		
		//scan matrix B
		System.out.println("Enter the matrix B following its row");
		int matrixB[][] = inputMatrices(width, height);
		
		int res[][] = new int[width][height];
		//sum of 2 matrices
		for (int j = 0; j < height; j++) {
			for (int i = 0; i < width; i++) {
				res[i][j] =matrixA[i][j] + matrixB[i][j];
			}
		}
		
		//print the result
		System.out.println("Sum of 2 matrix is: ");
		for (int j = 0; j < height; j++) {
			for (int i = 0; i < width; i++) {
				System.out.print(res[i][j] + " ");
			}
			System.out.println();
		}
		sc.close();
	}
	}

}
